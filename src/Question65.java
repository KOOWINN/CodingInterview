/**
 * 面试题65：不用加减乘除做加法
 *
 * 写一个函数，求两个正数之和，要求在函数体内不得使用"＋”、“-”、“×”、“÷”四则运算符号。
 *
 */
public class Question65 {

    // 我们试着把二进制的加法用位运算来替代。第一步不考虑进位对每一位相加。0加0、1加1的结果都是0，
    // 0加1、1加0的结果都是1。我们注意到，这和异或的结果是一样的。对异或而言，0和0、1和1的异或结果
    // 都是0，而0和1、1和0的异或结果时1。
    // 接着考虑第二步进位，对0加0、0加1、1加0而言，都不会产生进位，只有1加1时，会向前产生一个进位。
    // 此时我们可以想象成两个数先做位与运算，然后再向左移动一位。只有两个数都是1时，位与得到的结果是1，
    // 其余是0。
    // 第三步，把前两个步骤的结果相加。第三步相加的过程依然是重复前面两步，知道不产生进位为止。
    static int add(int num1, int num2) {
        int sum, carry;
        do {
            sum = num1 ^ num2;
            carry = (num1 & num2) << 1;
            num1 = sum;
            num2 = carry;
        } while (num2 != 0);
        return num1;
    }
    
    public static void main(String[] args) {
        System.out.println("sum=" + add(9,10));
    }
}